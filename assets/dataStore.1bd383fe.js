import{n as p,k as c}from"./index.ffe008a3.js";import{q as a}from"./app.5c870bdd.js";import{localforage as m}from"./localForage.24be37ee.js";import{dayjs as f}from"./dayjs.90447d16.js";import{a as q}from"./useQuerySaver.d29ff9ee.js";const j=p("globalDataStore",{state:()=>({selectedProject:null,requests:{},classifications:{},nameRequest:{},inProcess:{},pending:{},deployments:{},assignments:{},releasesByAssignment:{},releases:{},employees:{},workdayData:{},requestedTimeStamps:{},disaStatusChecks:{},projectDisaRoster:{},rawAssignments:{},assignmentsByEmployee:{},releasesByEmployee:{},termReasons:[],viewedProjects:{},projectUpdated:!1,rosters:{},pipelines:{},departures:{},adminData:{},approvedHeadcount:null}),getters:{getHireRequest:e=>s=>s?e.requests[s]?e.requests[s]:{}:{},getNameRequest:e=>s=>{if(s)return e.nameRequest[s]?e.nameRequest[s]:[];{let t=[];return Object.keys(e.nameRequest).forEach(r=>{t=t.concat(e.nameRequest[r])}),t}},getClassifications:e=>s=>{if(s)return e.classifications[s]?e.classifications[s]:[];{let t=[];return Object.keys(e.classifications).forEach(r=>{t=t.concat(e.classifications[r])}),t}},getInProcess:e=>s=>{if(s)return e.inProcess[s]?e.inProcess[s]:[];{let t=[];return Object.keys(e.inProcess).forEach(r=>{t=t.concat(e.inProcess[r])}),t}},getPending:e=>s=>{if(s)return e.pending[s]?e.pending[s]:[];{let t=[];return Object.keys(e.pending).forEach(r=>{t=t.concat(e.pending[r])}),t}},getDeployments:e=>s=>{if(s)return e.deployments[s]?e.deployments[s]:[];{let t=[];return Object.keys(e.deployments).forEach(r=>{t=t.concat(e.deployments[r])}),t}},getAssignments:e=>s=>{if(s)return e.assignments[s]?e.assignments[s]:[];{let t=[];return Object.keys(e.assignments).forEach(r=>{t=t.concat(e.assignments[r])}),t}},getEmployees:e=>s=>{if(s)return e.employees[s]?e.employees[s]:[];{let t=[];return Object.keys(e.employees).forEach(r=>{t=t.concat(e.employees[r])}),t}},getWorkdayData:e=>s=>s?e.employees[s]&&e.employees[s].workday?e.employees[s].workday:e.workdayData[s]?e.workdayData[s]:null:null,getEmployee:e=>s=>s&&e.employees[s]?e.employees[s]:null,getAssignmentsByEmployee:e=>s=>s&&e.assignmentsByEmployee[s]?e.assignmentsByEmployee[s]:null,getReleases:e=>s=>s&&e.releases[s]?e.releases[s]:null,getReleasesByAssignment:e=>s=>s&&e.releasesByAssignment[s]?e.releasesByAssignment[s]:null,getReleasesByEmployee:e=>s=>s&&e.releasesByEmployee[s]?e.releasesByEmployee[s]:null,getRawAssignment:e=>s=>s&&e.rawAssignments[s]?e.rawAssignments[s]:null,getRequestedTimeStamps(e){return e.requestedTimeStamps},getDisaStatusChecks:e=>({id:s,key:t})=>s&&e.disaStatusChecks[s]&&e.disaStatusChecks[s][t]?e.disaStatusChecks[s][t]:null,getProjectDisaRoster:e=>s=>s?e.projectDisaRoster[s]?e.projectDisaRoster[s]:[]:null,getTermReasons:e=>()=>e.termReasons,getViewedProjects:e=>s=>s&&e.viewedProjects[s]?e.viewedProjects[s]:null,getRosters:e=>s=>s&&e.rosters[s]?e.rosters[s]:null,getPipeline:e=>s=>s&&e.pipelines[s]?e.pipelines[s]:null,getDepartures:e=>s=>s&&e.departures[s]?e.departures[s]:null,getManpowerData:e=>({dataset:s,id:t})=>!t||!s?null:e[s]&&e[s][t]?e[s][t]:null,getAdminData:e=>({dataset:s})=>s&&e.adminData[s]?e.adminData[s]:null,getProjectUpdated(e){return e.projectUpdated},getApprovedHeadcount(e){return e.approvedHeadcount}},actions:{setAdminData({dataset:e,data:s}){this.adminData[e]=s},setAdminSubData({dataset:e,subset:s,id:t,data:r}){this.adminData[e]&&this.adminData[e][s]&&this.adminData[e][s][t]&&(this.adminData[e][s][t]=r)},setAdminItemData({dataset:e,id:s,data:t}){if(this.adminData[e]){const r=this.adminData[e].findIndex(i=>i[3]===s);r>-1&&(this.adminData[e][r]=t)}},setselectedProject(e,s){this.selectedProject=e},setTimeStamp({name:e,timeStamp:s,Id:t},r){if(this.requestedTimeStamps[t]?this.requestedTimeStamps[t][e]=s:this.requestedTimeStamps[t]={[e]:s},r){const i=JSON.parse(JSON.stringify(this.requestedTimeStamps));m.setItem(`${c.storageProcessTimeStamps}`,i)}},setTimeStampState(e){this.requestedTimeStamps=e},async fetchHireRequest(e){const s=this.getRequestedTimeStamps[e.requestId]||{};let t=!0;const r=[{9:{value:e.requestId},7:{value:"Table Record"},14:{value:266},6:{value:"bpzpyjbuy"}}];if(s.requests&&(s.requests.isBefore(f().subtract(1,"minute"))?t=!0:t=e.refresh?e.refresh:!1),t){this.setTimeStamp({Id:e.requestId,name:"request",timeStamp:f()},!0);const{data:i}=await a.fetchFromProjectsApp({fields:r},{action:"read",type:"request"});return this.setHireRequests({requestId:e.requestId,data:i},!0),{data:i}}else return{data:[]}},setHireRequests({requestId:e,data:s},t){this.requests[e]=s,t&&m.setItem(`view_hire_request_${e}`,s)},async fetchClassifications(e){const s=this.getRequestedTimeStamps[e.id]||{};let t=!0;const r=[{9:{value:e.id},7:{value:"Classifications By Request"}}];if(s.classifications&&(s.classifications.isBefore(f().subtract(1,"minute"))?t=!0:t=e.refresh?e.refresh:!1),t){this.setTimeStamp({id:e.id,name:"classifications",timeStamp:f()},!0);const{data:i}=await a.fetchFromProjectsApp({fields:r});return this.setClassifications({id:e.id,data:i},!0),{data:i}}else return{data:[]}},setClassifications({id:e,data:s},t){this.classifications[e]=s,t&&m.setItem(`${c.storageRequestClassifications}_${e}`,s)},async fetchNameRequest(e){const s=this.getRequestedTimeStamps[e.id]||{};let t=!0;const r=[{9:{value:e.id},7:{value:"Name Requests By Request"}}];if(s.nameRequest&&(s.nameRequest.isBefore(f().subtract(1,"minute"))?t=!0:t=e.refresh?e.refresh:!1),t){this.setTimeStamp({id:e.id,name:"nameRequest",timeStamp:f()},!0);const{data:i}=await a.fetchFromHiringApp({fields:r});return this.setNameRequest({id:e.id,data:i},!0),{data:i}}else return{data:[]}},setNameRequest({id:e,data:s},t){this.nameRequest[e]=s,t&&m.setItem(`${c.storageNameRequest}_${e}`,s)},addNameRequest({id:e,data:s}){this.nameRequest[e]&&Array.isArray(this.nameRequest[e])?s.forEach(t=>{this.nameRequest[e].push(t)}):this.nameRequest[e]=s},async fetchInProcess(e){const s=this.getRequestedTimeStamps[e.requestId]||{};let t=!0;const r=[{6:{value:"bp3gawbee"},7:{value:"Table Query"},8:{value:`{'138'.EX.'${e.requestId}'}AND{'37'.EX.'In Process'}AND{'38'.EX.4}`},9:{value:1},14:{value:239}}];if(s.inProcess&&(s.inProcess.isBefore(f().subtract(1,"minute"))?t=!0:t=e.refresh?e.refresh:!1),t){this.setTimeStamp({requestId:e.requestId,name:"inProcess",timeStamp:f()},!0);const{data:i}=await a.fetchFromHiringApp({fields:r});return this.setInProcess({requestId:e.requestId,data:i},!0),{data:i}}else return{data:[]}},setInProcess({requestId:e,data:s},t){this.inProcess[e]=s,t&&m.setItem(`${c.storageInProcess}_${e}`,s)},async fetchPending(e){const s=this.getRequestedTimeStamps[e.requestId]||{};let t=!0;const r=[{6:{value:"bp3gaxedv"},7:{value:"Table Query"},8:{value:`{'95'.EX.'${e.requestId}'}AND{'17'.EX.'In Process'}AND{'24'.EX.5}`},9:{value:1},14:{value:193}}];if(s.pending&&(s.pending.isBefore(f().subtract(1,"minute"))?t=!0:t=e.refresh?e.refresh:!1),t){this.setTimeStamp({requestId:e.requestId,name:"pending",timeStamp:f()},!0);const{data:i}=await a.fetchFromHiringApp({fields:r});return this.setPending({requestId:e.requestId,data:i},!0),{data:i}}else return{data:[]}},setPending({requestId:e,data:s},t){this.pending[e]=s,t&&m.setItem(`${c.storagePending}_${e}`,s)},async fetchDeployments(e){const s=this.getRequestedTimeStamps[e.requestId]||{};let t=!0;const r=[{6:{value:"bp3gaymc3"},7:{value:"Table Query"},8:{value:`{'80'.EX.'${e.requestId}'}AND{'20'.EX.'In Process'}AND{'27'.EX.6}`},9:{value:1},14:{value:204}}];if(s.deployments&&(s.deployments.isBefore(f().subtract(1,"minute"))?t=!0:t=e.refresh?e.refresh:!1),t){this.setTimeStamp({requestId:e.requestId,name:"deployments",timeStamp:f()},!0);const{data:i}=await a.fetchFromHiringApp({fields:r});return this.setDeployments({requestId:e.requestId,data:i},!0),{data:i}}else return{data:[]}},async setDeployments({requestId:e,data:s},t){this.deployments[e]=s,t&&m.setItem(`${c.storageDeployments}_${e}`,s)},updateDeployment({requestId:e,key:s,record:t}){const r=this.deployments[e].findIndex(i=>i[3]===s);r>-1&&(this.deployments[e][r]=t)},async fetchAssignments(e){const s=this.getRequestedTimeStamps[e.requestId]||{};let t=!0;const r=[{6:{value:"bp3gazpqj"},7:{value:"Table Query"},8:{value:`{'109'.EX.'${e.requestId}'}AND{'21'.EX.'In Process'}AND{'102'.EX.'Active'}AND{'72'.EX.7}`},9:{value:1},14:{value:110}}];if(s.assignments&&(s.assignments.isBefore(f().subtract(1,"minute"))?t=!0:t=e.refresh?e.refresh:!1),t){this.setTimeStamp({requestId:e.requestId,name:"assignments",timeStamp:f()},!0);const{data:i}=await a.fetchFromHiringApp({fields:r});return this.setAssignments({requestId:e.requestId,data:i},!0),{data:i}}else return{data:[]}},async setAssignments({requestId:e,data:s},t){this.assignments[e]=s,t&&m.setItem(`${c.storageAssignments}_${e}`,s)},async fetchEmployees(e){const s=this.getRequestedTimeStamps[e.id]||{};let t=!0;const r=[{7:{value:"Employee"},9:{value:e.id}}];if(s.employees&&(s.employees.isBefore(f().subtract(1,"minute"))?t=!0:t=e.refresh?e.refresh:!1),t){this.setTimeStamp({employeeId:e.id,name:"employees",timeStamp:f()},!0);const{data:i}=await a.fetchFromHiringApp({fields:r});return this.setEmployees({id:e.id,data:i},!0),{data:i}}else return{data:[]}},async setEmployees({id:e,data:s},t){this.employees[e]=s,t&&m.setItem(`storage_employees_${e}`,s)},setWorkdayData({id:e,data:s}){this.workdayData[e]=s},setAssignmentsByEmployee({id:e,data:s}){s&Array.isArray(s)?this.assignmentsByEmployee[e]=s[0]:this.assignmentsByEmployee[e]=s},setReleases({id:e,data:s}){this.releases[e]=s},updateReleaseAttachments({id:e,data:s}){this.releases[e][70]=[...s,this.releases[e][70]]},setReleasesByAssignment({id:e,data:s}){this.releasesByAssignment[e]=s},setReleasesByEmployee({id:e,data:s}){this.releasesByEmployee[e]=s},setRawAssignments({id:e,data:s}){this.rawAssignments[e]=s},setTermReasons({reasons:e}){this.termReasons=e},setDisaStatusChecks({id:e,assignmentId:s,data:t,projectId:r},i){if(e&&t&&(this.disaStatusChecks[e]=t),s&&this.assignments[r]&&t){const n=this.assignments[r].findIndex(u=>u[3]===s);n>-1&&(this.assignments[r][n].employee[556]=t)}e&&t&&r&&(this.projectDisaRoster[r]&&Array.isArray(this.projectDisaRoster[r])?this.projectDisaRoster[r].push(t):(this.projectDisaRoster[r]=[],this.projectDisaRoster[r].push(t))),i&&e&&m.setItem(`clm_proj_disa_checks_${e}`,t)},async fetchProjectData(e){if(this.viewedProjects[e])return this.viewedProjects[e];{const{data:s}=await a.fetchFromProjectsApp({fields:[q({type:"projects",query:"",id:e})]},{action:"read",type:"project"});return this.setViewedProjects({id:s[3],data:s}),s}},setRosters({id:e,data:s}){this.rosters[e]=s},setPipelines({id:e,data:s}){this.pipelines[e]=s},setDepartures({id:e,data:s}){this.departures[e]=s},setViewedProjects({id:e,data:s}){this.viewedProjects[e]=s,this.projectUpdated=!this.projectUpdated},updateViewedData({type:e,props:s,nested:t,id:r,dataset:i,subset:n,data:u,push:o}){if(r)if(this[e][r])if(t){if(s)if(Array.isArray(s))s.forEach(l=>{const{fid:h,value:y}=l;this[e][r][h]=y});else throw"Props must be an array";else o?this[e][r][i][n]?u.forEach(l=>{this[e][r][i][n].push(l)}):this[e][r][i][n]=u:this[e][r][i][n]=u;return this[e][r]}else{if(s)if(Array.isArray(s))s.forEach(l=>{const{fid:h,value:y}=l;this[e][r][h]=y});else throw"Props must be an array";else o?this[e][r][i]?u.forEach(l=>{this[e][r][i].push(l)}):this[e][r][i]=u:this[e][r][i]=u;return this[e][r]}else this[e][r]={},this.updateViewedData({type:e,props:s,nested:t,id:r,dataset:i,subset:n,data:u,push:o});else throw`You must provide an id for ${e}`},updateViewedEmployees({props:e,nested:s,id:t,dataset:r,subset:i,data:n,push:u}){if(t)if(this.employees[t])if(s){if(e)if(Array.isArray(e))e.forEach(o=>{const{fid:l,value:h}=o;this.employees[t][l]=h});else throw"Props must be an array";else u?this.employees[t][r][i]?n.forEach(o=>{this.employees[t][r][i].push(o)}):this.employees[t][r][i]=n:this.employees[t][r]?this.employees[t][r][i]=n:(this.employees[t][r]={},this.employees[t][r][i]=n);return this.employees[t]}else{if(e)if(Array.isArray(e))e.forEach(o=>{const{fid:l,value:h}=o;this.employees[t][l]=h});else throw"Props must be an array";else u?this.employees[t][r]?n.forEach(o=>{this.employees[t][r].push(o)}):this.employees[t][r]=n:this.employees[t][r]=n;return this.employees[t]}else this.employees[t]={},this.updateViewedEmployees({props:e,nested:s,id:t,dataset:r,subset:i,data:n,push:u});else throw"You must provide an id for the employee"},async updateViewedProjects({props:e,nested:s,id:t,dataset:r,subset:i,data:n,push:u,replace:o}){if(t)if(e)if(Array.isArray(e))e.forEach(l=>{const{fid:h,value:y}=l;this.viewedProjects[t][h]=y});else throw"Props must be an array";else{if(this.viewedProjects[t])return s?(this.viewedProjects[t][r][i]=n,this.viewedProjects[t]):(u?this.viewedProjects[t][r]?n.forEach(l=>{this.viewedProjects[t][r].push(l)}):this.viewedProjects[t][r]=n:o?this.viewedProjects[t][r]?this.viewedProjects[t][r].forEach(l=>{l[3]===n[3]&&(l=n)}):this.viewedProjects[t][r]=n:this.viewedProjects[t][r]=n,this.viewedProjects[t]);{const l=await this.fetchProjectData(t);return s?(this.viewedProjects[l[3]][r][i]=n,this.viewedProjects[l[3]]):(u?this.viewedProjects[l[3]][r]?n.forEach(h=>{this.viewedProjects[l[3]][r].push(h)}):this.viewedProjects[l[3]][r]=n:this.viewedProjects[l[3]][r]=n,this.viewedProjects[l[3]])}}else throw"You must provide an id for the project"},updateViewedRequests({props:e,nested:s,id:t,dataset:r,subset:i,data:n,push:u}){if(t)if(this.requests[t])if(s){if(e)if(Array.isArray(e))e.forEach(o=>{const{fid:l,value:h}=o;this.requests[t][l]=h});else throw"Props must be an array";else u?this.requests[t][r][i]?n.forEach(o=>{this.requests[t][r][i].push(o)}):this.requests[t][r][i]=n:this.requests[t][r][i]=n;return this.requests[t]}else{if(e)if(Array.isArray(e))e.forEach(o=>{const{fid:l,value:h}=o;this.requests[t][l]=h});else throw"Props must be an array";else u?this.requests[t][r]?n.forEach(o=>{this.requests[t][r].push(o)}):this.requests[t][r]=n:this.requests[t][r]=n;return this.requests[t]}else this.requests[t]={},this.updateViewedRequests({props:e,nested:s,id:t,dataset:r,subset:i,data:n,push:u});else throw"You must provide an id for the release"},updateViewedReleases({props:e,nested:s,id:t,dataset:r,subset:i,data:n,push:u}){if(t)if(this.releases[t])if(s){if(e)if(Array.isArray(e))e.forEach(o=>{const{fid:l,value:h}=o;this.releases[t][l]=h});else throw"Props must be an array";else u?this.releases[t][r][i]?n.forEach(o=>{this.releases[t][r][i].push(o)}):this.releases[t][r][i]=n:this.releases[t][r][i]=n;return this.releases[t]}else{if(e)if(Array.isArray(e))e.forEach(o=>{const{fid:l,value:h}=o;this.releases[t][l]=h});else throw"Props must be an array";else u?this.releases[t][r]?n.forEach(o=>{this.releases[t][r].push(o)}):this.releases[t][r]=n:this.releases[t][r]=n;return this.releases[t]}else this.releases[t]={},this.updateViewedReleases({props:e,nested:s,id:t,dataset:r,subset:i,data:n,push:u});else throw"You must provide an id for the release"},upsertProjectCraft({craft:e}){const s=this.viewedProjects[e[7]]?this.viewedProjects[e[7]].crafts.findIndex(t=>t[3]===e[3]):-5;s>-1?this.viewedProjects[e[7]].crafts[s]=e:this.viewedProjects[e[7]].crafts?this.viewedProjects[e[7]].crafts.push(e):this.viewedProjects[e[7]].crafts=[e]},removeFromRoster({id:e,data:s}){if(e){if(this.viewedProjects[e]&&this.viewedProjects[e].roster&&this.viewedProjects[e].roster.length>0){const t=this.viewedProjects[e].roster.filer(r=>r[3]!==s[3]);this.updateViewedProjects({id:e,dataset:"roster",data:t}),this.setRosters({id:e,data:t})}}else throw"You must provide and id"},removeData({type:e,key:s,item:t,storageKey:r}){const i=this[e][s].findIndex(u=>u[3]===t[3]);i>-1&&this[e][s].splice(i,1);const n=this[e][s];m.removeItem(`${c[r]}_${s}`),m.getItem(`${c[r]}_${s}`)||m.setItem(`${c[r]}_${s}`,n)},setApprovedHeadcount(e){this.approvedHeadcount=e}}});export{j as u};
